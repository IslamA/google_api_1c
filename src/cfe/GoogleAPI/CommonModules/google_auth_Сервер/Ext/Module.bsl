Функция КонвертироватьКлюч_P12_XML(ФайлВХранилище) Экспорт
	
	Каталог = КаталогВременныхФайлов() + "p12_xml\";
	
	ИмяФайлаСертификата = Каталог + "key.p12";
	ИмяФайлаСкрипта = Каталог + "script.ps1";
	ИмяФайлаРезультата = Каталог + "result.xml";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлВХранилище);
	ДвоичныеДанные.Записать(ИмяФайлаСертификата);
	
	ПолучитьЗапуститьСкриптКонвертации(ИмяФайлаСертификата, ИмяФайлаРезультата, ИмяФайлаСкрипта);
	
	Файл = Новый ЧтениеТекста(ИмяФайлаРезультата);
	СтрокаКлюч = Файл.Прочитать();
	Файл.Закрыть();
	
	УдалитьФайлы(ИмяФайлаСкрипта);
	УдалитьФайлы(ИмяФайлаРезультата);
	УдалитьФайлы(ИмяФайлаСертификата);
	
	Возврат СтрокаКлюч;
	
КонецФункции

Процедура ПолучитьЗапуститьСкриптКонвертации(ИмяФайлаСертификата, ИмяФайлаРезультата, ИмяФайлаСкрипта)
	
	ТекстовыйФайлСкрипт = Новый ТекстовыйДокумент;
	ТекстовыйФайлСкрипт.ДобавитьСтроку("$cert = New-Object system.security.cryptography.x509certificates.x509certificate2");
	ТекстовыйФайлСкрипт.ДобавитьСтроку("$pat=""" + ИмяФайлаСертификата + """");
	ТекстовыйФайлСкрипт.ДобавитьСтроку("$password=""notasecret""");
	ТекстовыйФайлСкрипт.ДобавитьСтроку("$flags = ""UserKeySet,Exportable""");
	ТекстовыйФайлСкрипт.ДобавитьСтроку("$cert.Import($pat, $password, $flags)");
	ТекстовыйФайлСкрипт.ДобавитьСтроку("$myXml = $cert.PrivateKey.ToXmlString($True)");
	ТекстовыйФайлСкрипт.ДобавитьСтроку("$myXml | Out-File """ + ИмяФайлаРезультата + """");
	
	ТекстовыйФайлСкрипт.Записать(
	    ИмяФайлаСкрипта,
	    КодировкаТекста.UTF8, 
	    Символы.ВК + Символы.ПС
	);
	
	ЗапуститьПриложение("PowerShell.exe -ExecutionPolicy UnRestricted -File """ + ИмяФайлаСкрипта + """", , Ложь);
	
КонецПроцедуры

//--

Функция ПолучиьПодписьRSASHA256(СтрокаДанные, КлючПодписи_XML) Экспорт
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(СтрокаДанные);
	ХешДвоичный = Хеширование.ХешСумма;
	
	КриптоПровайдер = Новый COMОбъект("System.Security.Cryptography.RSACryptoServiceProvider");
	КриптоПровайдер.FromXmlString(КлючПодписи_XML);
	
	SafeArrayBinХешДляПодписи = SafeИзДвоичных(ХешДвоичный);
	SafeArrayBinПодписьДвоичная = КриптоПровайдер.SignHash(SafeArrayBinХешДляПодписи, "SHA256");
	
	Возврат ДвоичныеИзSafe(SafeArrayBinПодписьДвоичная);
	
КонецФункции

Функция SafeИзДвоичных(ДвоичныеДанные)
	Буфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДвоичныеДанные);
	Байтов = Буфер.Размер;
	COMSafeArray = Новый COMSafeArray("VT_UI1", Байтов);//однобайтовый без знака
	Для сч = 0 по Байтов-1 Цикл
		COMSafeArray.SetValue(сч, Буфер.Получить(сч));
	КонецЦикла;
	Возврат COMSafeArray;
КонецФункции

Функция ДвоичныеИзSafe(SafeArrayBin) 
	Буфер = Новый БуферДвоичныхДанных(SafeArrayBin.GetLength());
	Для сч = 0 по SafeArrayBin.GetUpperBound() Цикл
		Буфер.Установить(сч, SafeArrayBin.GetValue(сч));
	КонецЦикла;
	Возврат ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
КонецФункции

//--

Функция ПолучитьТокен_КлючXML(СервисныйПользователь, ПраваДоступаСтрокой) Экспорт
	
	JWT = ПолучитьJWT_RS256(
	СервисныйПользователь.client_email, 
	ПраваДоступаСтрокой, 
	СервисныйПользователь.КлючПодписи_XML
	);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer");
	ПараметрыЗапроса.Вставить("assertion", JWT);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	
	Ответ = КоннекторHTTP.Post("https://oauth2.googleapis.com/token",, ДополнительныеПараметры);
	
	Если Ответ.КодСостояния = 200 Тогда
		
		СоответствиеОтвет = КоннекторHTTP.КакJson(Ответ);
		
		ЗаписатьТокен(СервисныйПользователь, СоответствиеОтвет);
		
		Возврат СоответствиеОтвет.Получить("access_token");
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТокен(СервисныйПользователь, ПраваДоступа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	google_auth_Токены.Токен КАК Токен
	|ИЗ
	|	РегистрСведений.google_auth_Токены КАК google_auth_Токены
	|ГДЕ
	|	google_auth_Токены.СервисныйПользователь = &СервисныйПользователь
	|	И google_auth_Токены.ДатаИстечения < &ДатаИстечения
	|	И google_auth_Токены.ПраваДоступа ПОДОБНО &ПраваДоступа";
	Запрос.УстановитьПараметр("СервисныйПользователь", СервисныйПользователь);
	Запрос.УстановитьПараметр("ДатаИстечения", ТекущаяДата() - 10);
	Запрос.УстановитьПараметр("ПраваДоступа", ПраваДоступа);
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Токен;
	КонецЕсли;
	
	Возврат ПолучитьТокен_КлючXML(СервисныйПользователь, ПраваДоступа);
	
КонецФункции


Функция ЗаписатьТокен(СервисныйПользователь, СоответствиеОтвет)
	
	МЗ = РегистрыСведений.google_auth_Токены.СоздатьМенеджерЗаписи();
	МЗ.СервисныйПользователь = СервисныйПользователь;
	МЗ.ПраваДоступа = СоответствиеОтвет.Получить("scope");
	МЗ.ДатаИстечения = ТекущаяДата() + СоответствиеОтвет.Получить("expires_in") ;
	МЗ.Токен = СоответствиеОтвет.Получить("access_token");
	МЗ.Записать(Истина);
	
КонецФункции


Функция ПолучитьJWT_RS256(client_email, scope, КлючПодписи_XML)
	
	ЗаголовокЗапроса = ПолучитьЗаголовокЗапроса();
	ЗаголовокЗапроса64 = google_РаботаСоСтроками.Base64Url(ПолучитьДвоичныеДанныеИзСтроки(ЗаголовокЗапроса));
	
	ТелоЗапроса = ПолучитьТелоЗапроса(client_email, scope);
	ТелоЗапроса64 = google_РаботаСоСтроками.Base64Url(ПолучитьДвоичныеДанныеИзСтроки(ТелоЗапроса));
	
	СтрокаДляСигнатуры = ЗаголовокЗапроса64 + "." + ТелоЗапроса64;
	
	ПодписьДвоичная = ПолучиьПодписьRSASHA256(СтрокаДляСигнатуры, КлючПодписи_XML);
	Подпись64 = google_РаботаСоСтроками.Base64Url(ПодписьДвоичная);
	
	Возврат СтрокаДляСигнатуры + "." + Подпись64;
	
КонецФункции


Функция ПолучитьЗаголовокЗапроса()
	
	СтруктураЗаголовок = Новый Структура;
	СтруктураЗаголовок.Вставить("alg", "RS256");
	СтруктураЗаголовок.Вставить("typ", "JWT");
	
	Возврат google_РаботаСоСтроками.В_JSON(СтруктураЗаголовок);
	
КонецФункции

Функция ПолучитьТелоЗапроса(client_email, scope)
	
	СтруктураТелоЗапроса = Новый Структура();
	
	//iss 	The email address of the service account.
	СтруктураТелоЗапроса.Вставить("iss", client_email);
	
	//scope 	A space-delimited list of the permissions that the application requests.
	//смотреть какой скоп нужен например: https://developers.google.com/sheets/api/guides/authorizing
	СтруктураТелоЗапроса.Вставить("scope", scope);
	
	//aud 	A descriptor of the intended target of the assertion. 
	//When making an access token request this value is always https://www.googleapis.com/oauth2/v4/token.
	СтруктураТелоЗапроса.Вставить("aud", "https://oauth2.googleapis.com/token");
	
	ВремяUTC = УниверсальноеВремя(ТекущаяДата());
	TimeStamp = ВремяUTC - Дата(1970,1,1);
	
	//iat 	The time the assertion was issued, specified as seconds since 00:00:00 UTC, January 1, 1970.
	СтруктураТелоЗапроса.Вставить("iat", TimeStamp);
	
	//exp 	The expiration time of the assertion, specified as seconds since 00:00:00 UTC, January 1, 1970. 
	//This value has a maximum of 1 hour after the issued time.
	СтруктураТелоЗапроса.Вставить("exp", TimeStamp + 60 * 60);
	
	
	Возврат google_РаботаСоСтроками.В_JSON(СтруктураТелоЗапроса);
	
КонецФункции






